<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goods">
<!--    开启了二级缓存-->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"></cache>
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        order by goods_id desc limit 10
    </select>

    <!--单参数传递，使用parameterType指定参数的数据类型即可，SQL中#{value}提取参数-->
    <select id="selectById" parameterType="Integer" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where goods_id = #{values}
    </select>

    <!--多参数传递时，使用parameterType指定Map接口，SQL中#{key}提取参数-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where current_price between #{min} and #{max}
        order by current_price limit 0,#{limt}
    </select>

    <!--resultType使用Map会产生乱序，默认的HashMap是不稳定的随机值，
    而使用链表结构的LinkedHashMap能解决这个问题（按字段的前后定义顺序排列）-->
    <!--利用LinkedHashMap保存多表关联结果
        NyBatis会将每一条记录包装为LinkedHashMap对象
        key是字段名，value是字段对应的值，字符类型根据表结构进行自动判断
        优点：易于拓展，易于使用
        缺点：太过于灵活，无法进行编译时检查-->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_name, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--结果映射-->
    <resultMap id="rmGoods" type="com.imooc.mybatis.dto.GoodsDTO">
        <!--设置主键字段与属性映射-->
        <id property="goods.goodsId" column="goods_id"></id>
        <!--设置非主键字段与属性映射-->
        <result property="goods.title" column="title"></result>
        <result property="goods.subTitle" column="sub_title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>

        <result property="category.categoryId" column="category_id"></result>
        <result property="category.categoryName" column="category_name"></result>
        <result property="category.parentId" column="parent_id"></result>
        <result property="category.categoryLevel" column="category_level"></result>
        <result property="category.categoryOrder" column="category_order"></result>

        <result property="test" column="test"></result>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.*, '1' as test
        from t_goods g,
             t_category c
        where g.category_id = c.category_id
    </select>

    <!--这里不需要good_id 是因为设置为自增  Values为属性名，需要和数据表字段一一对应-->
    <!--可用useGeneratedKey代替selectKey-->
    <insert id="insert" parameterType="com.imooc.mybatis.entity.Goods"
            useGeneratedKeys="true"
            keyProperty="goodsId"
            keyColumn="goods_id"
    >
        INSERT into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        Values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
        <!--解决了插入排序的问题 order="AFTER" 表示在insert语句执行完之后再执行该语句-->
        <!--        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">-->
        <!--            select last_insert_id()-->
        <!--        </selectKey>-->
    </insert>

    <update id="update" parameterType="com.imooc.mybatis.entity.Goods">
        UPDATE t_goods
        set title            = #{title},
            sub_title        = #{subTitle},
            original_cost    = #{originalCost},
            current_price    = #{currentPrice},
            discount         = #{discount},
            is_free_delivery = #{isFreeDelivery},
            category_id      = #{categoryId}
    </update>

    <delete id="delete" parameterType="Integer">
        delete
        from t_goods
        where goods_id = #{value}
    </delete>

    <select id="selectByTitle" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from t_goods
        where title = #{title};

        ${order}
        <!--# 代表预编译处理 传去什么就是什么-->
        <!--$ 代表原文传值-->

    </select>

    <!--1 = 1可以保证语法正确-->
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select * from t_goods
        <where>
        <if test="categoryId != null">
            and category_id = #{categoryId}
        </if>
        <if test="currentPrice != null">
            and current_price &lt; #{currentPrice}
        </if>
        </where>
    </select>
</mapper>

